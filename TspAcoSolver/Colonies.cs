using Microsoft.Extensions.Options;

namespace TspAcoSolver
{

    /// <summary>
    /// Interface for managing and organizing ants that are then used for finding multiple solutions for traveling salesman problem.
    /// </summary>
    public interface IColony
    {
        /// <summary>
        /// Generate multiple valid tours of the <c>graph</c>
        /// </summary>
        /// <param name="graph">Pheromone graph on which to construct tours</param>
        /// <returns>List of valid tours on <c>graph</c></returns>
        public List<ITour> GenerateSolutions(PheromoneGraph graph);
    }

    /// <summary>
    /// <para>
    /// Abstract class of colony that manages and organizes ants that are then used for finding multiple solutions for traveling salesman problem.
    /// </para>
    /// <para>
    /// Contains common properties and methods for constricting solutions (mainly common method for constructing one solution).
    /// </para>
    /// </summary>
    public abstract class ColonyBase : IColony
    {
        protected IAnt[] _ants;

        protected int _threadCount;

        /// <summary>
        /// Count of ants used for generating solutions
        /// </summary>
        public int AntCount { get => _ants.Length; }
        public ColonyBase(IAntFactory<IAnt> antFactory, IOptions<ColonyParams> colonyParamsOpt) : this(antFactory, colonyParamsOpt.Value) { }
        /// <summary>
        /// Construct using ant factory for creating ants and with parameters that influence solution generation
        /// </summary>
        /// <param name="antFactory">Factory that creates given number of ants</param>
        /// <param name="colonyParams">Parameters that influence solution generation</param>
        public ColonyBase(IAntFactory<IAnt> antFactory, ColonyParams colonyParams)
        {
            _ants = antFactory.CreateAnts((int)colonyParams.AntCount);
            _threadCount = (int)colonyParams.ThreadCount;
        }

        /// <summary>
        /// Let ant with index <c>antIndex</c> generate <c>ITour</c> on <c>graph</c>
        /// </summary>
        /// <param name="graph">Graph on which to construct <c>ITour</c></param>
        /// <param name="antIndex">Index of ant to use for generating the solution</param>
        /// <returns>Tour generated by ant with index <c>antIndex</c> in <c>graph</c></returns>
        protected ITour Generate1Solution(PheromoneGraph graph, int antIndex)
        {
            IAnt ant = _ants[antIndex];
            ant.FindTour(graph);
            return ant.LastTour;
        }

        /// <summary>
        /// Let each ant generate one <c>ITour</c>.
        /// </summary>
        /// <param name="graph">Graph on which to construct <c>ITour</c></param>
        /// <returns>List of tours that are each generated by different ants</returns>
        public abstract List<ITour> GenerateSolutions(PheromoneGraph graph);
    }

    /// <summary>
    /// Colony class that manages and organizes ants that are then used for finding multiple solutions for traveling salesman problem using the Ant System algorithm.
    /// </summary>
    public class AsColony : ColonyBase
    {
        /// <summary>
        /// Construct using ant factory for creating ants and options with parameters that influence solution generation
        /// </summary>
        /// <param name="antFactory">Factory that creates given number of ants</param>
        /// <param name="colonyParamsOpt">Options with parameters that influence solution generation</param>
        public AsColony(IAntFactory<IAnt> antFactory, IOptions<ColonyParams> colonyParamsOpt) : base(antFactory, colonyParamsOpt) { }
        /// <summary>
        /// Construct using ant factory for creating <c>AsAnt</c> and with parameters that influence solution generation
        /// </summary>
        /// <param name="antFactory">Factory that creates given number of <c>AsAnt</c></param>
        /// <param name="colonyParams">Parameters that influence solution generation</param>
        public AsColony(IAntFactory<IAnt> antFactory, ColonyParams colonyParams) : base(antFactory, colonyParams) { }

        /// <summary>
        /// Let ants with indexes in range from <c>from</c> (included) to <c>to</c> (excluded) generate <c>ITour</c> on <c>graph</c>
        /// </summary>
        /// <param name="graph">Graph on which to construct <c>ITour</c></param>
        /// <param name="from">First index of range in which the ants generate solutions and ant on this index is included</param>
        /// <param name="to">Last index of range in which the ants generate solutions and ant on this index is excluded</param>
        /// <returns>List of tours generated by ants with indexes in range from <c>from</c> (included) to <c>to</c> (excluded) on <c>graph</c></returns>
        List<ITour> GenerateSolutionsInRange(PheromoneGraph graph, int from, int to)
        {
            List<ITour> solutions = new();
            for (int i = from; i < to; i++)
            {
                // Console.WriteLine($"Ant {i} solving in Thread {Thread.CurrentThread.ManagedThreadId}");
                ITour solution = Generate1Solution(graph, i);
                if (solution.IsValid())
                {
                    solutions.Add(solution);
                }
            }

            return solutions;
        }

        /// <summary>
        /// Generate multiple valid tours of the <c>graph</c> using the ants in Ant System manner
        /// </summary>
        /// <param name="graph">Pheromone graph on which to construct tours</param>
        /// <returns>List of valid tours on <c>graph</c></returns>
        public override List<ITour> GenerateSolutions(PheromoneGraph graph)
        {
            List<ITour> solutions = new();
            Thread[] threads = new Thread[_threadCount];
            int antCountForThread = AntCount / _threadCount;

            List<ITour>[] results = new List<ITour>[_threadCount];
            Lock threadLock = new();
            for (int i = 0; i < _threadCount; i++)
            {
                int from = antCountForThread * i;
                int to;
                if (i == _threadCount - 1)
                {
                    to = AntCount;
                }
                else
                {
                    to = antCountForThread * (i + 1);
                }

                int j = i;
                threads[i] = new Thread(() =>
                {
                    results[j] = GenerateSolutionsInRange(graph, from, to);
                });
                threads[i].Start();
            }
            foreach (Thread thread in threads)
            {
                thread.Join();
            }
            for (int i = 0; i < _threadCount; i++)
            {
                solutions.AddRange(results[i]);
            }
            return solutions;
        }
    }

    /// <summary>
    /// Colony class that manages and organizes ants that are then used for finding multiple solutions for traveling salesman problem using the Ant Colony System algorithm.
    /// </summary>
    public class AcsColony : ColonyBase
    {
        /// <summary>
        /// Construct using ant factory for creating ants and options with parameters that influence solution generation
        /// </summary>
        /// <param name="antFactory">Factory that creates given number of ants</param>
        /// <param name="colonyParamsOpt">Options with parameters that influence solution generation</param>
        public AcsColony(IAntFactory<IAnt> antFactory, IOptions<ColonyParams> colonyParamsOpt) : base(antFactory, colonyParamsOpt) { }
        /// <summary>
        /// Construct using ant factory for creating ants and with parameters that influence solution generation
        /// </summary>
        /// <param name="antFactory">Factory that creates given number of ants</param>
        /// <param name="colonyParams">Parameters that influence solution generation</param>
        public AcsColony(IAntFactory<IAnt> antFactory, ColonyParams colonyParams) : base(antFactory, colonyParams) { }

        /// <summary>
        /// Generate multiple valid tours of the <c>graph</c> using the ants in Ant Colony System manner
        /// </summary>
        /// <param name="graph">Pheromone graph on which to construct tours</param>
        /// <returns>List of valid tours on <c>graph</c></returns>
        public override List<ITour> GenerateSolutions(PheromoneGraph graph)
        {
            List<ITour> solutions = new();
            for (int i = 0; i < AntCount; i++)
            {
                ITour solution = Generate1Solution(graph, i);
                // Console.WriteLine($"Local update");

                graph.UpdateLocallyPheromones(solution);
                if (solution.IsValid())
                {
                    solutions.Add(solution);
                }
            }

            return solutions;
        }
    }
}